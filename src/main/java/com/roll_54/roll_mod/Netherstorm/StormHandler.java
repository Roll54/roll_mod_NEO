package com.roll_54.roll_mod.Netherstorm;

import com.roll_54.roll_mod.RollMod;
import com.roll_54.roll_mod.init.BlockRegistry;
import net.minecraft.core.BlockPos;
import net.minecraft.core.registries.Registries;
import net.minecraft.network.chat.Component;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.MinecraftServer;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.tags.TagKey;
import net.minecraft.util.RandomSource;
import net.minecraft.world.effect.MobEffectInstance;
import net.minecraft.world.effect.MobEffects;
import net.minecraft.world.entity.EntityType;
import net.minecraft.world.entity.EquipmentSlot;
import net.minecraft.world.entity.Mob;
import net.minecraft.world.entity.MobSpawnType;
import net.minecraft.world.entity.ai.attributes.Attributes;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.Items;
import net.minecraft.world.level.GameType;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.state.properties.BlockStateProperties;
import net.neoforged.bus.api.SubscribeEvent;
import net.neoforged.fml.common.EventBusSubscriber;
import net.neoforged.neoforge.event.tick.ServerTickEvent;

import javax.annotation.Nullable;
import java.util.Random;

@EventBusSubscriber(modid = RollMod.MODID) // –∑–º—ñ–Ω—ñ—Ç—å MODID —Ç—É—Ç —ñ —É StormShared
public class StormHandler {

    private static StormState state;

    /**
     * –¢–µ–≥ –¥–ª—è —Ä–µ—á–µ–π, —â–æ –∑–∞—Ö–∏—â–∞—é—Ç—å –≤—ñ–¥ —à—Ç–æ—Ä–º—É (–º–∞—Å–∫–∏ —Ç–æ—â–æ)
     */
    public static final TagKey<Item> STORM_PROTECTIVE_TAG =
            TagKey.create(
                    Registries.ITEM,
                    ResourceLocation.parse("roll_mod:storm_protective")
            );


    /**
     * –õ—ñ–Ω–∏–≤–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É —Ç—ñ–∫—É
     */
    private static void initIfNeeded(MinecraftServer server) {
        if (state != null) return;
        ServerLevel overworld = server.getLevel(Level.OVERWORLD);
        if (overworld != null) {
            state = StormState.get(overworld);
            if (state.ticksUntilNextStorm <= 0 && !state.stormActive) {
                // –ü–æ—á–∞—Ç–∫–æ–≤—É –∑–∞—Ç—Ä–∏–º–∫—É, —è–∫—â–æ —ó—ó —â–µ –Ω–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ
                state.ticksUntilNextStorm = getRandomStormDelay();
                state.dirty();
            }
        }
    }

    private static int spawnTickCounter = 0;

    @SubscribeEvent
    public static void onServerTick(ServerTickEvent.Post e) {
        var server = e.getServer();
        initIfNeeded(server);
        if (state == null) return;

        if (!state.stormActive) {
            if (--state.ticksUntilNextStorm <= 0) {
                startStorm(server);
            } else {
                state.dirty();
            }
            return;
        }

        if (++state.stormTicks >= state.stormDuration) {
            endStorm(server);
        } else {
            applyStormInNether(server);
            state.dirty();

            // üî• –ù–æ–≤–µ: —Å–ø–∞–≤–Ω –ª—ñ—á–∏–ª—å–Ω–∏–∫–æ–º
            if (++spawnTickCounter >= 18000) { // 400 —Ç—ñ–∫ = 20 —Å–µ–∫—É–Ω–¥
                spawnStormMobs(server);
                spawnTickCounter = 0;
            }
        }
    }

    //–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ —à—Ç–æ—Ä–º—É –î–õ–Ø –í–°–Ü–Ñ–á –ë–†–û–ù–Ü, –∞ —Ç–æ —Ö—É–ª—î –º–∏ —à–∞–ø–∫—É –Ω–∞–¥—è–≥–∞—î–º–æ —ñ –Ω–∞–º –¥–æ–±—Ä–µ?
    private static boolean isWearingFullProtectiveSet(ServerPlayer player) {
        return player.getItemBySlot(EquipmentSlot.HEAD).is(STORM_PROTECTIVE_TAG)
                && player.getItemBySlot(EquipmentSlot.CHEST).is(STORM_PROTECTIVE_TAG)
                && player.getItemBySlot(EquipmentSlot.LEGS).is(STORM_PROTECTIVE_TAG)
                && player.getItemBySlot(EquipmentSlot.FEET).is(STORM_PROTECTIVE_TAG);
    }


    private static void applyStormInNether(MinecraftServer server) {
        ServerLevel nether = server.getLevel(Level.NETHER);
        if (nether == null) return;

        for (ServerPlayer player : nether.players()) {
            // –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∫—Ä–µ–∞—Ç–∏–≤/—Å–ø–µ–∫—Ç–∞—Ç–æ—Ä
            var gm = player.gameMode.getGameModeForPlayer();
            if (gm.isCreative() || gm == GameType.SPECTATOR) continue;

            // –Ø–∫—â–æ –ø–æ–≤–Ω–∏–π —Å–µ—Ç –∑–∞—Ö–∏—Å—Ç—É ‚Äî —à—Ç–æ—Ä–º –Ω–µ –¥—ñ—î + –∑–Ω—ñ–º–∞—î–º–æ –ø–æ–≥–∞–Ω—ñ –µ—Ñ–µ–∫—Ç–∏
            if (isWearingFullProtectiveSet(player)) {
                // –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –Ω–µ–º–∞ wither/poison –ø—ñ–¥ —á–∞—Å —à—Ç–æ—Ä–º—É –∑ –ø–æ–≤–Ω–∏–º —Å–µ—Ç–æ–º
                player.removeEffect(MobEffects.WITHER);
                player.removeEffect(MobEffects.POISON);
                // –º–æ–∂–µ—à —Ç–∞–∫–æ–∂ –ø—Ä–∏–±—Ä–∞—Ç–∏ —ñ–Ω—à—ñ ¬´—à—Ç–æ—Ä–º–æ–≤—ñ¬ª –µ—Ñ–µ–∫—Ç–∏, —è–∫—â–æ —Ç—Ä–µ–±–∞:
                // player.removeEffect(MobEffects.WEAKNESS);
                // player.removeEffect(MobEffects.CONFUSION);
                // player.removeEffect(MobEffects.BLINDNESS);
                continue;
            }

//            if (player.tickCount % 400 == 0) {
//                spawnAroundPlayer(nether, player, EntityType.WITHER_SKELETON);
//                spawnAroundPlayer(nether, player, EntityType.PIGLIN_BRUTE);
//                spawnAroundPlayer(nether, player, EntityType.BLAZE);
//            }

            // –Ü–Ω–∞–∫—à–µ ‚Äî —á–∞—Å—Ç–∫–æ–≤–∏–π –∑–∞—Ö–∏—Å—Ç: –º–∞—Å–∫–∞ –≤ —à–æ–ª–æ–º—ñ
            ItemStack helmet = player.getItemBySlot(EquipmentSlot.HEAD);
            boolean hasProtectiveHelmet = helmet.is(STORM_PROTECTIVE_TAG);

            if (hasProtectiveHelmet) {
                // –∫–æ–∂–Ω—ñ 20 —Ç—ñ–∫ ‚Äî –∑–Ω–æ—à—É–≤–∞—Ç–∏ —à–æ–ª–æ–º/–º–∞—Å–∫—É
                if (player.tickCount % 20 == 0) {
                    helmet.hurtAndBreak(1, player, EquipmentSlot.HEAD);
                }
                // –ó–∞ –±–∞–∂–∞–Ω–Ω—è–º: –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ ¬´–ª–µ–≥—à—ñ¬ª –¥–µ–±–∞—Ñ–∏ –∞–±–æ –≤–∑–∞–≥–∞–ª—ñ –Ω—ñ—á–æ–≥–æ.
                // –ó–∞—Ä–∞–∑ ‚Äî –Ω—ñ—á–æ–≥–æ –Ω–µ –Ω–∞–∫–ª–∞–¥–∞—î–º–æ.
            } else {
                // –ü–æ–≤–Ω–æ–≥–æ —Å–µ—Ç—É –Ω–µ–º–∞—î —ñ —à–æ–ª–æ–º–∞ –Ω–µ–º–∞—î ‚Äî –Ω–∞–∫–ª–∞–¥–∞—î–º–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ñ –µ—Ñ–µ–∫—Ç–∏
                player.addEffect(new MobEffectInstance(MobEffects.WEAKNESS, 1600, 3)); // 80—Å Weakness IV
                player.addEffect(new MobEffectInstance(MobEffects.CONFUSION, 200, 0)); // 10—Å Nausea I
                player.addEffect(new MobEffectInstance(MobEffects.WITHER, 200, 4));    // 10—Å Wither V
                player.addEffect(new MobEffectInstance(MobEffects.BLINDNESS, 200, 0)); // 10—Å Blindness I
                // poison –∑–∞ –±–∞–∂–∞–Ω–Ω—è–º ‚Äî —Ç–∏ –∑–≥–∞–¥—É–≤–∞–≤ —Å–∞–º–µ –ø—Ä–æ –Ω–µ—ó:
            }

        }
        if (state != null && state.stormTicks % 3000 == 0) { // –∫–æ–∂–Ω—ñ ~10 —Å–µ–∫—É–Ω–¥
            tryGrowSulfurBerries(nether);
        }
    }

    private static void startStorm(MinecraftServer server) {
        state.stormActive = true;
        state.stormTicks = 0;
        state.stormDuration = getRandomStormDuration();
        state.ticksUntilNextStorm = getRandomStormDelay();
        state.dirty();

        for (ServerPlayer p : server.getPlayerList().getPlayers()) {
            p.sendSystemMessage(Component.translatable("message.roll_mod.nether_storm.start")
                    .withStyle(s -> s.withColor(0xb00538)));
        }
    }


    private static void endStorm(MinecraftServer server) {
        state.stormActive = false;
        state.stormTicks = 0;
        state.dirty();

        for (ServerPlayer p : server.getPlayerList().getPlayers()) {
            p.sendSystemMessage(Component.translatable("message.roll_mod.nether_storm.end").withStyle(style -> style.withColor(0x009921)));
        }
    }

    private static int getRandomStormDelay() {
        // 1‚Äì12 –≥–æ–¥–∏–Ω; 72000 —Ç—ñ–∫ = 1 –≥–æ–¥–∏–Ω–∞ (—É Minecraft 20 —Ç—ñ–∫/—Å)
        return 72_000 * (1 + new Random().nextInt(12));
    }

    private static int getRandomStormDuration() {
        // 1‚Äì6 –≥–æ–¥–∏–Ω
        return 72_000 * (1 + new Random().nextInt(6));
    }

    // –ü—É–±–ª—ñ—á–Ω–µ API (–º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –∑ –∫–æ–º–∞–Ω–¥)
    public static boolean isStormActive() {
        return state != null && state.stormActive;
    }

    public static int getStormTicks() {
        return state != null ? state.stormTicks : 0;
    }

    public static int getStormDuration() {
        return state != null ? state.stormDuration : 0;
    }

    public static int getTicksUntilNextStorm() {
        return state != null ? state.ticksUntilNextStorm : 0;
    }

    /**
     * –ü—Ä–∏–º—É—Å–æ–≤–∏–π –∑–∞–ø—É—Å–∫/–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
     */
    static void forceStart(MinecraftServer server, @Nullable Integer durationTicks) {
        initIfNeeded(server);
        if (state != null && !state.stormActive) {
            state.stormActive = true;
            state.stormTicks = 0;
            state.stormDuration = durationTicks != null ? durationTicks : getRandomStormDuration();
            state.ticksUntilNextStorm = getRandomStormDelay();
            state.dirty();

            for (ServerPlayer p : server.getPlayerList().getPlayers()) {
                p.sendSystemMessage(Component.literal(
                        "‚ö° NetherStorm started for " + state.stormDuration + " ticks"
                ));
            }
        }
    }

    static void forceEnd(MinecraftServer server) {
        initIfNeeded(server);
        if (state != null && state.stormActive) endStorm(server);
    }

    private static void spawnStormMobs(MinecraftServer server) {
        ServerLevel nether = server.getLevel(Level.NETHER);
        if (nether == null) return;
        if (nether.getDifficulty() == net.minecraft.world.Difficulty.PEACEFUL) return;

        for (ServerPlayer player : nether.players()) {
            // ‚ùå –ø—Ä–∏–±—Ä–∞–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É Creative/Spectator
            int count = 3 + nether.random.nextInt(8); // 3..10
            spawnWitherPack(nether, player, count);

            spawnAroundPlayer(nether, player, EntityType.BLAZE);
        }
    }

    private static void spawnWitherPack(ServerLevel level, ServerPlayer player, int count) {
        // –°–ø–µ—Ä—à—É –∑–Ω–∞—Ö–æ–¥–∏–º–æ –æ–¥–Ω—É –ë–ê–ó–û–í–£ –≤–∞–ª—ñ–¥–Ω—É –ø–æ–∑–∏—Ü—ñ—é –±—ñ–ª—è –≥—Ä–∞–≤—Ü—è (—â–æ–± –∑–≥—Ä–∞—è –±—É–ª–∞ –ø–æ—Ä—É—á)
        BlockPos base = findGroundedPosNearPlayer(level, player, 12, 16);
        if (base == null) return;

        // –†–æ–∑–∫–ª–∞–¥–∞—î–º–æ —Å–∫–µ–ª–µ—Ç—ñ–≤ –Ω–∞–≤–∫–æ–ª–æ –±–∞–∑–∏ —É –º–∞–ª–µ–Ω—å–∫–æ–º—É —Ä–∞–¥—ñ—É—Å—ñ
        int spawned = 0;
        for (int i = 0; i < count; i++) {
            // –∫–æ–º–ø–∞–∫—Ç–Ω–∏–π —Ä–æ–∑–∫–∏–¥: -1..+1 –ø–æ X/Z, —â–æ–± —é–Ω—ñ—Ç–∏ —Å—Ç–æ—è–ª–∏ –±–ª–∏–∑—å–∫–æ
            int ox = level.random.nextIntBetweenInclusive(-1, 1);
            int oz = level.random.nextIntBetweenInclusive(-1, 1);

            BlockPos pos = findGroundedPosFrom(level, base.offset(ox, 0, oz), 6);
            if (pos == null) continue;

            Mob mob = EntityType.WITHER_SKELETON.create(level);
            if (mob == null) continue;

            mob.moveTo(pos.getX() + 0.5, pos.getY(), pos.getZ() + 0.5, level.random.nextFloat() * 360F, 0);

            if (!level.noCollision(mob)) continue;

            // 1) finalizeSpawn
            mob.finalizeSpawn(
                    level,
                    level.getCurrentDifficultyAt(pos),
                    MobSpawnType.EVENT,
                    null
            );

            // 2) –ë–∞—Ñ HP √ó2.5
            applyHealthBuff(mob);

            // 3) –î–æ–¥–∞—î–º–æ –≤ —Å–≤—ñ—Ç, –∞ –ø–æ—Ç—ñ–º –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ç—ñ–∫—É –≤–∏–¥–∞—î–º–æ –∑–±—Ä–æ—é
            if (level.addFreshEntity(mob)) {
                var pName = player.getGameProfile().getName();
                RollMod.LOGGER.info("[NetherStorm] Spawned PACK wither_skeleton #{}/{} at {} {} {} near {}",
                        (++spawned), count, pos.getX(), pos.getY(), pos.getZ(), pName);

                // –≤–∏–¥–∞—Ç–∏ –º–µ—á –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ç—ñ–∫—É ‚Äî —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—à–µ –∑–∞ –º–∏—Ç—Ç—î–≤–µ —Å–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è
                level.getServer().execute(() -> {
                    tryEquipWitherSkeleton(level, mob);          // –º–µ—á (–¥–∏–≤. —Ç–≤—ñ–π –º–µ—Ç–æ–¥ –Ω–∏–∂—á–µ)
                    mob.setDropChance(EquipmentSlot.MAINHAND, 0.0f);
                    mob.setPersistenceRequired();
                });
            }
        }
    }

    @org.jetbrains.annotations.Nullable
    private static BlockPos findGroundedPosNearPlayer(ServerLevel level, ServerPlayer player, int radius, int tries) {
        for (int i = 0; i < tries; i++) {
            int dx = level.random.nextIntBetweenInclusive(-radius, radius);
            int dz = level.random.nextIntBetweenInclusive(-radius, radius);
            if (dx * dx + dz * dz < 9) continue; // –Ω–µ –ø—ñ–¥ —Å–∞–º—ñ –Ω–æ–≥–∏

            BlockPos guess = new BlockPos(player.getBlockX() + dx, player.getBlockY(), player.getBlockZ() + dz);
            BlockPos grounded = findGroundedPosFrom(level, guess, 12);
            if (grounded != null) return grounded;
        }
        return null;
    }

    /**
     * –í—ñ–¥ –∑–∞–¥–∞–Ω–æ—ó —Ç–æ—á–∫–∏ —à—É–∫–∞—î –Ω–∞–π–±–ª–∏–∂—á—É ¬´–∑–µ–º–ª—é –ø—ñ–¥ –Ω–æ–≥–∞–º–∏¬ª: —Å–ø—É—Å–∫–∞—î–º–æ—Å—å –≤–Ω–∏–∑, —Ç—Ä–æ—Ö–∏ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–≥–æ—Ä—É.
     */
    @org.jetbrains.annotations.Nullable
    private static BlockPos findGroundedPosFrom(ServerLevel level, BlockPos from, int verticalScan) {
        BlockPos.MutableBlockPos pos = new BlockPos.MutableBlockPos(from.getX(), from.getY(), from.getZ());

        // –°–ø–æ—á–∞—Ç–∫—É —Å–ø—É—Å–∫–∞—î–º–æ—Å—è, –ø–æ–∫–∏ –∑–Ω–∏–∑—É –ø–æ—Ä–æ–∂–Ω—å–æ (–Ω–µ–º–∞ –∫–æ–ª—ñ–∑—ñ—ó) –∞–±–æ –Ω–µ –¥–æ—Å—è–≥–ª–∏ –º–µ–∂
        int minY = level.getMinBuildHeight() + 1;
        int steps = 0;
        while (pos.getY() > minY
                && level.getBlockState(pos.below()).getCollisionShape(level, pos.below()).isEmpty()
                && steps++ < verticalScan) {
            pos.move(0, -1, 0);
        }

        // –Ø–∫—â–æ —Ç–∞–∫ —ñ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –ø—ñ–¥–ª–æ–≥—É ‚Äî —Å–ø—Ä–æ–±—É—î–º–æ –∫—ñ–ª—å–∫–∞ –∫—Ä–æ–∫—ñ–≤ –≤–≥–æ—Ä—É (—Ä–∞–ø—Ç–æ–º –∑–∞–π—à–ª–∏ —É –ø–æ—Ä–æ–∂–Ω–∏–Ω—É)
        if (level.getBlockState(pos.below()).getCollisionShape(level, pos.below()).isEmpty()) {
            for (int up = 0; up < 6; up++) {
                pos.move(0, 1, 0);
                if (!level.getBlockState(pos.below()).getCollisionShape(level, pos.below()).isEmpty()) break;
            }
        }

        // –£–º–æ–≤–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ: —î –ø—ñ–¥–ª–æ–≥–∞ + —É —Å–∞–º—ñ–π –∫–ª—ñ—Ç–∏–Ω—Ü—ñ –ø–æ—Ä–æ–∂–Ω—å–æ
        if (level.getBlockState(pos.below()).getCollisionShape(level, pos.below()).isEmpty()) return null;
        if (!level.getBlockState(pos).getCollisionShape(level, pos).isEmpty()) return null;

        return pos.immutable();
    }

    private static void applyHealthBuff(Mob mob) {
        var max = mob.getAttribute(Attributes.MAX_HEALTH);
        if (max != null) {
            max.setBaseValue(max.getBaseValue() * 2.5D); // +50%
            mob.setHealth(mob.getMaxHealth());
        }
    }

    /**
     * –ü—Ä–æ–±—É—î –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ –∑–Ω–∞–π—Ç–∏ –≤–∞–ª—ñ–¥–Ω—É –ø–æ–∑–∏—Ü—ñ—é –±—ñ–ª—è –≥—Ä–∞–≤—Ü—è —ñ –∑–∞—Å–ø–∞–≤–Ω–∏—Ç–∏ –º–æ–±–∞ –∑ –±–∞—Ñ–æ–º HP.
     */
    //TODO –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –±—ñ–ª—å—à —Ä–æ–∑—É–º–Ω–∏–π –º—ñ–∫—Å—ñ–Ω, —ñ–¥—ñ–æ—Ç —Ç–∏ –Ω–∞ —Ä–æ–ª–ª—ñ..
    //todo –∑–∞–º—ñ–Ω—è—Ç–∏ —Å–ø–∞–≤–Ω –∑–≤–∏—á–∞–π–Ω–∏—Ö –º–æ–±—ñ–≤ –Ω–∞ –≤—ñ–∑–µ—Ä —Å–∫–µ–ª–µ—Ç—ñ–≤ –ø—ñ–¥ —á–∞—Å —à—Ç–æ—Ä–º—É —á–µ—Ä–µ–∑ –º—ñ–∫—Å—ñ–Ω
    private static void spawnAroundPlayer(ServerLevel level, ServerPlayer player, EntityType<? extends Mob> type) {
        RandomSource rnd = level.random;
        final int RADIUS = 12;
        final int TRIES = 4;

        for (int i = 0; i < TRIES; i++) {
            int dx = rnd.nextIntBetweenInclusive(-RADIUS, RADIUS);
            int dz = rnd.nextIntBetweenInclusive(-RADIUS, RADIUS);
            if (dx * dx + dz * dz < 9) continue; // –Ω–µ –ø—ñ–¥ —Å–∞–º—ñ –Ω–æ–≥–∏

            BlockPos.MutableBlockPos pos = new BlockPos.MutableBlockPos(
                    player.getBlockX() + dx,
                    player.getBlockY(),
                    player.getBlockZ() + dz
            );

            int minY = level.getMinBuildHeight() + 1;
            while (pos.getY() > minY &&
                    level.getBlockState(pos.below()).getCollisionShape(level, pos.below()).isEmpty()) {
                pos.move(0, -1, 0);
            }

            if (level.getBlockState(pos.below()).getCollisionShape(level, pos.below()).isEmpty()) continue;
            if (!level.getBlockState(pos).getCollisionShape(level, pos).isEmpty()) continue;

            Mob mob = type.create(level);
            if (mob == null) continue;

            mob.moveTo(pos.getX() + 0.5, pos.getY(), pos.getZ() + 0.5, rnd.nextFloat() * 360F, 0);

            if (!level.noCollision(mob)) continue;

            mob.finalizeSpawn(
                    level,
                    level.getCurrentDifficultyAt(pos),
                    MobSpawnType.EVENT,
                    null
            );


            tryEquipWitherSkeleton(level, mob);


            applyHealthBuff(mob);

            if (level.addFreshEntity(mob)) {
                // –õ–æ–≥—É—î–º–æ —Å–ø–∞–≤–Ω
                RollMod.LOGGER.info(
                        "[NetherStorm] Spawned {} at {} {} {} near {}",
                        type.toShortString(), pos.getX(), pos.getY(), pos.getZ(),
                        player.getGameProfile().getName()
                );

                // ‚úÖ –î–æ–¥–∞—î–º–æ –∑–±—Ä–æ—é wither-—Å–∫–µ–ª–µ—Ç—É –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ç—ñ–∫—É,
                // —â–æ–± –Ω–µ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É–≤–∞–ª–æ –∑ –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ—é —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—î—é –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è/—Ü—ñ–ª–µ–π
                level.getServer().execute(() -> {
                    tryEquipWitherSkeleton(level, mob);
                    mob.setPersistenceRequired();                // –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ: –Ω–µ –∑–Ω–∏–∫–∞—î –≤–∏–ø–∞–¥–∫–æ–≤–æ
                    mob.setDropChance(EquipmentSlot.MAINHAND, 0.0f); // –Ω–µ –¥—Ä–æ–ø–∞—Ç–∏ –º–µ—á
                    // –Ø–∫—â–æ –∑–∞—Ö–æ—á–µ—à, –º–æ–∂–Ω–∞ –ø—Ä–∏–º—É—Å–∏—Ç–∏ –∞–≥—Ä–µ—Å—ñ—é:
                    // if (mob instanceof net.minecraft.world.entity.monster.Monster mon) mon.setAggressive(true);
                });

                break;
            }

        }
    }

    private static void tryEquipWitherSkeleton(ServerLevel level, Mob mob) {
        if (mob.getType() != EntityType.WITHER_SKELETON) return;

        // –ú–µ—á —É —Ä—É–∫—É
        mob.setItemSlot(EquipmentSlot.MAINHAND, new ItemStack(Items.NETHERITE_SWORD));
        mob.setDropChance(EquipmentSlot.MAINHAND, 0.0f);

        // –ü–æ–≤–Ω–∏–π —Å–µ—Ç –±—Ä–æ–Ω—ñ
        mob.setItemSlot(EquipmentSlot.HEAD, new ItemStack(Items.NETHERITE_HELMET));
        mob.setItemSlot(EquipmentSlot.CHEST, new ItemStack(Items.NETHERITE_CHESTPLATE));
        mob.setItemSlot(EquipmentSlot.LEGS, new ItemStack(Items.NETHERITE_LEGGINGS));
        mob.setItemSlot(EquipmentSlot.FEET, new ItemStack(Items.NETHERITE_BOOTS));

        mob.setDropChance(EquipmentSlot.HEAD, 0.0f);
        mob.setDropChance(EquipmentSlot.CHEST, 0.0f);
        mob.setDropChance(EquipmentSlot.LEGS, 0.0f);
        mob.setDropChance(EquipmentSlot.FEET, 0.0f);

        // –ü–æ–∑–Ω–∞—á–∏–º–æ, —â–æ —Ü–µ–π –º–æ–± ‚Äî ¬´—à—Ç–æ—Ä–º–æ–≤–∏–π¬ª, —â–æ–± –ø–æ—Ç—ñ–º –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –≤ —ñ–≤–µ–Ω—Ç–∞—Ö/–¥—Ä–æ–ø—ñ
        mob.getPersistentData().putBoolean("roll_mod:storm_spawn", true);
    }

    private static void tryGrowSulfurBerries(ServerLevel nether) {
        RandomSource random = nether.random;

        // –°–∫—ñ–ª—å–∫–∏ —Å–ø—Ä–æ–± –∑–∞ —Ç—ñ–∫
        for (int i = 0; i < 10; i++) {
            // –≤–∏–ø–∞–¥–∫–æ–≤—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –ø–æ–±–ª–∏–∑—É –≥—Ä–∞–≤—Ü—è
            ServerPlayer player = nether.getRandomPlayer();
            if (player == null) return;

            int x = player.getBlockX() + random.nextIntBetweenInclusive(-16, 16);
            int z = player.getBlockZ() + random.nextIntBetweenInclusive(-16, 16);
            int y = player.getBlockY() + random.nextIntBetweenInclusive(-4, 4);

            BlockPos pos = new BlockPos(x, y, z);
            BlockPos above = pos.above();

            // –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞: –ø—ñ—Å–æ–∫ –¥—É—à –∞–±–æ “ë—Ä—É–Ω—Ç –¥—É—à
            var state = nether.getBlockState(pos);
            if ((state.is(Blocks.SOUL_SAND) || state.is(Blocks.SOUL_SOIL))
                    && nether.isEmptyBlock(above)) {

                var berryBlock = BlockRegistry.SULFUR_BERRY_BLOCK.get().defaultBlockState();

                // —è–∫—â–æ –º–∞—î –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å age ‚Äî –≤–∏—Å—Ç–∞–≤–ª—è—î–º–æ 0
                if (berryBlock.hasProperty(BlockStateProperties.AGE_7)) {
                    berryBlock = berryBlock.setValue(BlockStateProperties.AGE_7, 0);
                }

                nether.setBlock(above, berryBlock, 3);
                RollMod.LOGGER.info("[NetherStorm] Grew sulfur berry at {}, {}, {}", x, y + 1, z);
            }
        }
    }
}
